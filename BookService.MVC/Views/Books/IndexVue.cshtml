@{
    ViewBag.Title = "Books with Vue.js";
}

<h2>@ViewBag.Title</h2>

<article id="app" class="row">
    <header class="col-md-4">
        <h3>{{ message }}</h3>   @*Vue mustache*@
        <nav>
            <ul class="list-group">
                <li v-for="book in books" v-on:click="fetchBookDetails(book)" :class="getBookClass(book)" style="cursor:pointer">
                    <span class="bookTitle">{{ book.title }}</span>
                </li>
            </ul>
        </nav>
    </header>
    <div v-if="currentBook" class="col-md-4">
        <h3>Details</h3>
        <div class="form-horizontal">
            <div class="form-group">
                <label class="col-sm-2 control-label small">Title</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" v-model="currentBook.title" :readonly="isReadOnly">
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label small">Author</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" v-model="currentBook.author.lastName +' '  +currentBook.author.firstName" v-if="isReadOnly" :readonly="isReadOnly">
                    <select v-model="currentBook.author" class="form-control" v-if="!isReadOnly">
                        <option v-for="author in authors" :value="author">{{ author.lastName }} {{ author.firstName }}</option>
                    </select>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label small">Publisher</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" :value="currentBook.publisher.name" v-if="isReadOnly" :readonly="isReadOnly">
                    <select v-model="currentBook.publisher" class="form-control" v-if="!isReadOnly">
                        <option v-for="publisher in publishers" :value="publisher">{{ publisher.name }}</option>
                    </select>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label small">Year</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" v-model="currentBook.year" :readonly="isReadOnly">
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label small">ISBN</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" v-model="currentBook.isbn" :readonly="isReadOnly">
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label small">Pages</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" v-model="currentBook.numberOfPages" :readonly="isReadOnly">
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label small">Price</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" v-model="currentBook.price" :readonly="isReadOnly">
                </div>
            </div>
            <button v-on:click="toEditMode(true)" v-if="isReadOnly" class="btn btn-primary">Edit</button>
            <button v-on:click="toEditMode(false)" v-if="isReadOnly" class="btn btn-warning">New</button>
            <button v-on:click="save" v-if="!isReadOnly" class="btn btn-primary">Save</button>
            <button v-on:click="cancel" v-if="!isReadOnly" class="btn btn-default">Cancel</button>
        </div>
        
    </div>
</article>


@section scripts{
    <script src="~/js/vue.js"></script>
    <script>
        var apiURL = 'https://localhost:44396/api/';

        var app = new Vue({
            el: '#app',
            data: {
                message: 'Loading books...',
                books: null,
                authors:null,
                currentBook: null,
                isReadOnly: true,
                isEdit: false
            },
            created: function () {
                var self = this;
                self.fetchBooks();
                self.fetchAuthors();
                self.fetchPublishers();
            },
            methods: {
                fetchBooks: function () {
                    self = this;
                    fetch(`${apiURL}Books/Basic`)
                        .then(res => res.json())
                        .then(function (books) {
                            books.forEach(function (book, i) {
                                book.isActive = false;
                            });
                            self.books = books;
                            self.message = 'Overview';
                            if (self.books.length > 0) {
                                self.fetchBookDetails(self.books[0]);
                            }
                        })
                        .catch(err => console.error('Fout: ' + err));
                },
                fetchBookDetails: function (book) {
                    self = this;
                    if (!self.isReadOnly) return;
                    fetch(`${apiURL}Books/${book.id}`)
                        .then(res => res.json())
                        .then(function (res) {
                            self.currentBook = res;
                            self.makeBookActive(book.id);
                        })
                        .catch(err => console.error('Fout: ' + err));
                },
                makeBookActive: function (bookid) {
                    self.books.forEach(function (book, i) {
                            book.isActive = book.id === bookid ? true : false;
                    });
                },

                getBookClass: function (book) {
                    if (book.isActive) return 'list-group-item active';
                    return 'list-group-item';
                },
                fetchAuthors: function () {
                    self = this;
                    fetch(`${apiURL}Authors`)
                        .then(res => res.json())
                        .then(function (res) {
                            self.authors = res;
                        })
                        .catch(err => console.error('Fout: ' + err));
                },
                fetchPublishers: function () {
                    self = this;
                    fetch(`${apiURL}Publishers`)
                        .then(res => res.json())
                        .then(function (res) {
                            self.publishers = res;
                        })
                        .catch(err => console.error('Fout: ' + err));
                },
                toEditMode: function (isEdit) {
                    self = this;
                    self.isReadOnly = false;
                    self.isEdit = isEdit;
                    if (!isEdit) {
                        self.currentBook = { "title": "", "isbn": "", "year": 0, "price": 0, "numberOfPages": 0, "authorId": 0, "author": { "firstName": "", "lastName": "", "birthDate": "", "id": 0, "created": "" }, "publisherId": 0, "publisher": { "name": "", "": "", "id": 0, "created": "" }, "fileName": "", "ratings": null, "id": 0, "created": "" };
                    }
                },
                save: function () {
                    var self = this;
                    // opslaan - ajax configuratie
                    var ajaxHeaders = new Headers();
                    ajaxHeaders.append("Content-Type", "application/json");
                    var ajaxConfig = {
                        method: 'PUT',
                        body: JSON.stringify(self.currentBook),
                        headers: ajaxHeaders
                    };

                    var myRequest = null;
                    // opslaan: edit of toevoegen
                    if (self.isEdit) {
                        myRequest = new Request(`${apiURL}Books/${self.currentBook.id}`, ajaxConfig);
                    }
                    else {
                        ajaxConfig.method = 'POST';
                        myRequest = new Request(`${apiURL}Books/`, ajaxConfig);
                    }
                    fetch(myRequest)
                        .then(res => res.json())
                        .then(function (res) {
                            self.currentBook.authorId = self.currentBook.author.id;
                            self.currentBook.publisherId = self.currentBook.publisher.id;

                            if (self.isEdit) {
                                // het geupdate boek uit de boekenlijst ophalen
                                theBook = self.books.filter(book => (book.id === self.currentBook.id))[0];
                                // gegevens aanpassen
                                theBook.title = self.currentBook.title;
                            } else {
                                // boek toevoegen aan de lijst - we voegen eigenlijk een bookdetailDTO to ipv bookDTO
                                console.log(res);
                                self.currentBook.id = res.id;
                                self.books.push(self.currentBook);
                                self.fetchBookDetails(self.books[self.books.length - 1]);
                            }
                            self.editMode = false;
                        })
                        .catch(err => console.error('Fout: ' + err));
                },
                cancel: function () {
                    var self = this;
                    self.isReadOnly = true;
                    self.fetchBookDetails(self.currentBook);
                },

            }
        });
    </script>
}

